#!/bin/sh

# use not-forking to obtain sources for a LumoSQL target

# Copyright 2020 The LumoSQL Authors under the terms contained in LICENSES/MIT
#
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: 2020 The LumoSQL Authors

# usage: get-lumo-sources [OPTIONS] SOURCES_DIR CFG_VERSION LUMO_TARGET

# SOURCES_DIR is the directory where the sources will be installed; this will
# have (at least) two subdirectories, one containing the sqlite3 sources, and
# one containing the sources for the selected backend; it will also produce
# some extra files needed by the build process

# CFG_VERSION is the version of the configuration to use, which can be a
# version number for the "lumosql-build" not-fork configuration, or "test"
# to use the bundled version

# LUMO_TARGET is either a version of sqlite3 to build ("unmodified sqlite3")
# or a string of the form SQLITE_VERSION+BACKEND_NAME-BACKEND_VERSION,
# for example: "3.33.0" or "3.7.17+lmdb-0.9.26"
# see tool/parse-target.tcl for a more complete description

# OPTIONS are currently one of:
# --update       always check with upstream repositories for updates
# --no-update    use cached versions of sources if available
# the default if neither is given is to look for the value in the local not-fork
# configuration
# In general one can use "--no-update" when selecting a version already
# available in the local cache, since there is no need to download later
# versions in this case; this is why the first call to "not-fork" in this
# script uses these options, but later calls specify "--no-update"

update=''
case "$1" in
    -n|--no-u*) update='--no-update'; shift ;;
    -u|--upd*) update='--update'; shift ;;
esac

if [ $# -ne 3 ]
then
    echo "Usage: $(basename "$0") [OPTIONS] SOURCES_DIR CFG_VERSION LUMO_TARGET" >&2
    echo "See comments at top of script for more information" >&2
    exit 1
fi

LUMO_SOURCES="$1"
CFG_VERSION="$2"
LUMO_TARGET="$3"

LUMO_DIR="$LUMO_SOURCES/.lumosql-work"
mkdir -p "$LUMO_DIR" || exit 1

tclsh tool/parse-target.tcl "$LUMO_TARGET" "$LUMO_DIR" || exit 1

SQLITE3_VERSION="$(cat "$LUMO_DIR/sqlite3_version")"
LUMO_BACKEND_NAME="$(cat "$LUMO_DIR/backend_name")"
LUMO_BACKEND_VERSION="$(cat "$LUMO_DIR/backend_version")"

# check that not-fork is in path, and is at least version 0.2
NOTFORK_REQUIRED=0.2
if ! not-fork --check-version "$NOTFORK_REQUIRED" > "$LUMO_DIR/nfv"
then
    if [ -s "$LUMO_DIR/nfv" ]
    then
	echo "Installed version of not-fork (`cat "$LUMO_DIR/nfv"`) is too old" >&2
    else
	echo 'Cannot find not-fork in $PATH' >&2
    fi
    echo "Please install not-fork version >= $NOTFORK_REQUIRED" >&2
    echo "See https://lumosql.org/src/not-forking/" >&2
    exit 1
fi

# check that the required configuration exists; if it's "test" there's nothing
# to check, but for anything else we need to use "not-fork" to obtain some
# configuration for "not-fork". We avoid an infinite recursion by always using
# the "test" configuration for this.
if [ ".$CFG_VERSION" = ".test" ]
then
    CFG_DIR=not-fork.d
else
    not-fork $update -i not-fork.d -o "$LUMO_SOURCES" -v "$CFG_VERSION" lumosql-build || exit 1
    CFG_DIR="$LUMO_SOURCES/lumosql-build"
fi

# and make sure the configuration provides at least sqlite3 and the selected
# backend, in the requested versions
OK=true
if [ -d "$CFG_DIR/sqlite3" ]
then
    not-fork $update -i "$CFG_DIR" -q -v "$SQLITE3_VERSION" sqlite3 > "$LUMO_DIR/sqlite3_info" || OK=false
else
    echo "Invalid '$CFG_VERSION' configuration directory $CFG_DIR" >&2
    OK=false
fi
if [ -n "$BACKEND_NAME" ]
then
    if [ -d "$CFG_DIR/$BACKEND_NAME" ]
    then
	not-fork $update -i "$CFG_DIR" -q -v "$BACKEND_VERSION" "$BACKEND_NAME" > "$LUMO_DIR/backend_info" || OK=false
    else
	echo "Invalid backend '$BACKEND_NAME'" >&2
	OK=false
    fi
else
    > "$LUMO_DIR/backend_info"
fi
$OK || exit 1

# get sources
not-fork --no-update -i "$CFG_DIR" -o "$LUMO_SOURCES" -v "$SQLITE3_VERSION" sqlite3 || OK=false
if [ -n "$BACKEND_NAME" ]
then
    not-fork --no-update -i "$CFG_DIR" -o "$LUMO_SOURCES" -v "$BACKEND_VERSION" "$BACKEND_NAME" || OK=false
fi
$OK || exit 1

# provide some information the build process may use
awk '/commit_id / { print $NF }' "$LUMO_DIR/sqlite3_info" > "$LUMO_DIR/sqlite3_commit_id"
awk '/commit_id / { print $NF }' "$LUMO_DIR/backend_info" > "$LUMO_DIR/backend_commit_id"

exit 0

